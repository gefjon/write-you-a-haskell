(in-package :write-you-a-haskell)

(defmacro defexpr (expr-name slots &key (documentation "generated by WRITE-YOU-A-HASKELL:DEFEXPR"))
  "e.g. (DEFEXPR let ((binding symbol) (initializer expression) (body expression)))"
  (let ((slot-names (gefjon-utils:slot-descriptors-names slots)))
    `(progn
       (gefjon-utils:defstruct ,expr-name ,slots :documentation ,documentation)
       (defmethod print-object ((this ,expr-name) stream)
         (with-slots ,slot-names this
           ;; TODO write a reader macro which supports this syntax
           (format stream "[~s~@{ ~s~}]" ',expr-name ,@slot-names)))

       (defmacro ,expr-name ,slot-names
         (,(gefjon-utils:constructor-name expr-name)
          ,@slot-names)))))

(defmacro defenum (type-name &rest variants)
  (flet ((define-variant (variant)
           (etypecase variant
             (symbol nil)
             (list `(defexpr ,@variant
                      :documentation "variant generated by WRITE-YOU-A-HASKELL:DEFENUM"))))
         (type-name-for (variant)
           (the symbol
                (etypecase variant
                  (symbol variant)
                  (list (first variant))))))
    `(progn
       ,@(mapcar #'define-variant variants)
       (deftype ,type-name ()
         '(or ,@(mapcar #'type-name-for variants))))))
