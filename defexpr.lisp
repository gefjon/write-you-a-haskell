(in-package :write-you-a-haskell)

(defmacro defexpr (expr-name slots &key superclasses (documentation "generated by WRITE-YOU-A-HASKELL:DEFEXPR"))
  "e.g. (DEFEXPR let ((binding symbol) (initializer expression) (body expression)))"
  `(progn
     (gefjon-utils:defclass ,expr-name ,slots :superclasses ,superclasses :documentation ,documentation)
     (defmethod print-object ((this ,expr-name) stream)
       (print-unreadable-object (this stream :type t :identity nil)
         (with-slots ,(gefjon-utils:slot-descriptors-names slots) this
           (format stream "~@{~a~^ ~}" ,@(gefjon-utils:slot-descriptors-names slots)))))))

(defmacro defenum (type-name &rest variants)
  (flet ((define-variant (variant)
           `(defexpr ,@variant
              :documentation "variant generated by WRITE-YOU-A-HASKELL:DEFENUM"
              :superclasses (,type-name))))
    `(progn
       (gefjon-utils:defclass ,type-name () :documentation "superclass generated by WRITE-YOU-A-HASKELL:DEFENUM")
       ,@(mapcar #'define-variant variants))))
